% Программа для подбора коэффициентов известной аналитической зависимости
% под набор реальных данных

function main
clear %очистка рабочей области (памяти)
clc %очистка экрана
load('X0.txt'); %Загрузка вектора Х0 из файла
load('Y0.txt'); %Загрузка вектора Y0 из файла

%X0 = X0(31:50);     %
%Y0 = Y0(31:50);     % подрезка векторов для исследования эффективности
disp(length(X0));   % алгоритма в более узком диапазоне
disp(length(Y0));   %

%Вызов функции подбора точки входа
x = poisk(X0,Y0);
% 	  x(1)= 1650; %A     %%%%%%%%%%%%%%%%%%%%%%%
% 	  x(2)= 3000; %B     % Точка входа вручную %
% 	  x(3)= 1600; %m     %%%%%%%%%%%%%%%%%%%%%%%
%     x(4)= 50; %r
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     
%        X0 = (-800:800);            %%%%%%%%%%%%%%%%%%% 
%        MU = 0.1;                   %%%%%%%%%%%%%%%%%%%
%        SIGMA = 50;                 % Тестовые данные %
%        Y0 = normpdf(X0,MU,SIGMA);  %%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
         %plot(X0,Y0);
         %pause;
         
% Вызов функции поиска минимума с предварительной установкой параметров
options=optimset('MaxFunEvals',Inf,'MaxIter',Inf);
[xoptim,fval,exitflag,output] = fminsearch(@(x) kriteriy(x,X0,Y0),x,options);
 
% Присвоение найденному вектору "нормальных" обозначений
A = xoptim(1);
B = xoptim(2);
m = xoptim(3);
r = xoptim(4);

% Вывод результатов на экран
disp(sprintf('Технические данные поиска решения:'));
disp(sprintf('Значение целевой функции в точке минимума fval=%d',fval));
disp(sprintf('exitflag=%d',exitflag));
disp(sprintf('exitflag положителен, если процесс итераций сходится с использованием options.tol X, отрицательный, если итерационный процесс не сходится к полученному решению х, и 0, если превышено максимальное число итераций options.maxiter;'));
disp(output);

disp(sprintf('Результат:'));
disp(sprintf('A=%d',A));
disp(sprintf('B=%d',B));
disp(sprintf('m=%d',m));
disp(sprintf('r=%d',r));

disp(sprintf('Y = A - B*exp(-((X0-m)/r)^2) = %d - %d*exp(-((X0-%d)/%d)^2)',A,B,m,r));

% Результирующая функция
Y = A - B.*exp(-((X0-m)/r).^2);
%Вывод экспериментальных данных и рассчитаной кривой
plot(X0,Y0,X0,Y);

function fval = kriteriy(x,X0,Y0) % Функция расчета критерия качества
A = x(1);
B = x(2);
m = x(3);
r = x(4);

% Критерий качества (чем меньше, тем лучше совпадение графиков)
fval = sum(((A - B.*exp(-((X0-m)/r).^2)) - Y0).^2);

function x = poisk(X0,Y0) % Функция поиска наилучшей точки входа (перебором значений)

fvalMin = +Inf;
for A=0:50:3000
    for B=0:50:4000
        for m=0:100:3000
            for r=0:50:500  
                fval = sum(((A - B.*exp(-((X0-m)/r).^2)) - Y0).^2);
                if fval < fvalMin
                    fvalMin = fval;
                    x(1)= A; %A
                    x(2)= B; %B
                    x(3)= m; %m
                    x(4)= r; %r
                end
            end
        end
    end
end
disp(sprintf('Найденные перебором начальные значения:'));
disp(sprintf('A=%d, B=%d, m=%d, r=%d',x(1),x(2),x(3),x(4)));
disp(sprintf('fvalMin=%d',fvalMin)) ;